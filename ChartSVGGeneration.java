// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aggrid.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import org.apache.batik.dom.GenericDOMImplementation;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.Document;
import org.apache.batik.transcoder.image.PNGTranscoder;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import java.awt.*;
import java.io.*;
import com.mendix.core.Core;
import java.nio.charset.StandardCharsets;

public class ChartSVGGeneration extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __document;
	private aggrid.proxies.SvgDocument document;
	private java.util.List<IMendixObject> __chartData;
	private java.util.List<aggrid.proxies.ChartData> chartData;
	private java.lang.String fillColor;
	private java.math.BigDecimal strokeWidth;
	private java.lang.String seriesName;
	private java.lang.String xAxisLabel;
	private java.lang.String yAxisLabel;

	public ChartSVGGeneration(IContext context, IMendixObject document, java.util.List<IMendixObject> chartData, java.lang.String fillColor, java.math.BigDecimal strokeWidth, java.lang.String seriesName, java.lang.String xAxisLabel, java.lang.String yAxisLabel)
	{
		super(context);
		this.__document = document;
		this.__chartData = chartData;
		this.fillColor = fillColor;
		this.strokeWidth = strokeWidth;
		this.seriesName = seriesName;
		this.xAxisLabel = xAxisLabel;
		this.yAxisLabel = yAxisLabel;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.document = this.__document == null ? null : aggrid.proxies.SvgDocument.initialize(getContext(), __document);

		this.chartData = java.util.Optional.ofNullable(this.__chartData)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__chartDataElement -> aggrid.proxies.ChartData.initialize(getContext(), __chartDataElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE

        String fillColor = this.fillColor;
        if (fillColor == null) {
            fillColor = "#000000";
        }



        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		this.__chartData.forEach(chartData -> {
            Core.getLogger("ChartSVGGeneration").info("ChartSVGGeneration: " +chartData.getMember(getContext(), "Newdate").getValue(getContext()).toString());
            dataset.addValue(Integer.valueOf(chartData.getMember(getContext(), "Value").getValue(getContext()).toString()), this.seriesName, chartData.getMember(getContext(), "Newdate").getValue(getContext()).toString());

        });

        // create chart
        JFreeChart chart = ChartFactory.createAreaChart(
                "",   // chart title
                this.xAxisLabel,                  // domain axis label
                this.yAxisLabel,                  // range axis label
                dataset,              // data
                PlotOrientation.VERTICAL,
                false,                 // include legend
                true,                 // tooltips
                false                 // urls
        );

        // customizing the chart
        CategoryPlot plot = chart.getCategoryPlot();

        // change the line color and stroke
        AreaRenderer areaRenderer = new AreaRenderer();
        areaRenderer.setSeriesFillPaint(0, Color.BLACK);
        areaRenderer.setSeriesStroke(0, new BasicStroke(2.0f));

        plot.setRenderer(areaRenderer);
        plot.setBackgroundPaint(Color.white);
        plot.setRangeGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.BLACK);

        //chart.getTitle().setPaint(Color.BLUE);
        //chart.getTitle().setFont(new Font("Serif", Font.BOLD, 20));

        // create svg
        Document domFactory = GenericDOMImplementation.getDOMImplementation().
                createDocument("http://www.w3.org/2000/svg", "svg", null);
        SVGGraphics2D svgGenerator = new SVGGraphics2D(domFactory);
        Rectangle bounds = new Rectangle(0, 0, 800, 600);

        // draw the chart in the SVG generator
        chart.draw(svgGenerator, bounds);

        // write svg file
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        try {
            svgGenerator.stream(new OutputStreamWriter(byteStream, StandardCharsets.UTF_8), false);
            byte[] svgBytes = byteStream.toByteArray();

            PNGTranscoder t = new PNGTranscoder();
            t.addTranscodingHint(PNGTranscoder.KEY_FORCE_TRANSPARENT_WHITE, Boolean.FALSE);
            InputStream is = new ByteArrayInputStream(svgBytes);
            TranscoderInput input = new TranscoderInput(is);
            ByteArrayOutputStream newOut = new ByteArrayOutputStream();
            TranscoderOutput output = new TranscoderOutput(newOut);
            t.transcode(input,output);
            byte[] newSvgBytes = newOut.toByteArray();
            InputStream is2 = new ByteArrayInputStream(newSvgBytes);

            Core.storeImageDocumentContent(getContext(), this.document.getMendixObject(), is2,600,800);
            byteStream.flush();
            byteStream.close();
            newOut.flush();
            newOut.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        // Testing to generate and view the svg file
        try (FileWriter out = new FileWriter("chart.svg")) {
            svgGenerator.stream(out, false);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return null;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ChartSVGGeneration";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
